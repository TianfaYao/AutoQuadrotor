<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AutoQuadrotor.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AutoQuadrotor.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Jun 27 16:28:35 2017
<BR><P>
<H3>Maximum Stack Usage =       4056 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TaskLoop() &rArr; task_2_ms() &rArr; IMU::Attitude(float) &rArr; EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float) &rArr; AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*) &rArr; mrdivide(float*, const float*)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream2_IRQHandler</a> from dev_dma.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">SDIO_IRQHandler</a> from dev_sd.o(i.SDIO_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from dev_clock.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[62]">__sti___12_uav_task_cpp_UAV</a> from uav_task.o(i.__sti___12_uav_task_cpp_UAV) referenced from uav_task.o(.init_array)
 <LI><a href="#[66]">__sti___14_dev_ak8975_cpp_Ak8975</a> from dev_ak8975.o(i.__sti___14_dev_ak8975_cpp_Ak8975) referenced from dev_ak8975.o(.init_array)
 <LI><a href="#[67]">__sti___14_dev_ms5611_cpp_Ms5611</a> from dev_ms5611.o(i.__sti___14_dev_ms5611_cpp_Ms5611) referenced from dev_ms5611.o(.init_array)
 <LI><a href="#[63]">__sti___14_uav_filter_cpp_filter</a> from uav_filter.o(i.__sti___14_uav_filter_cpp_filter) referenced from uav_filter.o(.init_array)
 <LI><a href="#[68]">__sti___15_dev_mup6050_cpp_Mpu6050</a> from dev_mup6050.o(i.__sti___15_dev_mup6050_cpp_Mpu6050) referenced from dev_mup6050.o(.init_array)
 <LI><a href="#[65]">__sti___16_uav_attitude_cpp_Attitude</a> from uav_attitude.o(i.__sti___16_uav_attitude_cpp_Attitude) referenced from uav_attitude.o(.init_array)
 <LI><a href="#[64]">__sti___7_imu_cpp_imu</a> from imu.o(i.__sti___7_imu_cpp_imu) referenced from imu.o(.init_array)
 <LI><a href="#[61]">fputc</a> from dev_usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5e]">main</a> from uav_task.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[60]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6c]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[180]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[181]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[182]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[183]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[184]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrdivide(float*, const float*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_mrdivide(float*, const float*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b7]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPVTG_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPRMC_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGSV_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGSA_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGGA_Analysis(nmea_msg*, unsigned char*)
</UL>

<P><STRONG><a name="[69]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::GetDIS_SPE(float)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angular(float)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::BaroAltCalculate()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Err_d(float)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::GetDIS_SPE(float)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angular(float)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Thr()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::BaroAltCalculate()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Err_d(float)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::GetDIS_SPE(float)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Thr()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_US100::disCall()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::GetDIS_SPE(float)
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Err_d(float)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::GetDIS_SPE(float)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angular(float)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_2_ms()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadMagOfferset()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadGyrOfferset()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAccOfferset()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Thr()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::BaroAltCalculate()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_US100::disCall()
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Err_d(float)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::GetDIS_SPE(float)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angular(float)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Thr()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::BaroAltCalculate()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_US100::disCall()
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[18b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[18e]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[73]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[190]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dev_dma.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DEBUS::RemotCall()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA::Configuration()
</UL>

<P><STRONG><a name="[fe]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA::Configuration()
</UL>

<P><STRONG><a name="[80]"></a>DMA_GetITStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA::Configuration()
</UL>

<P><STRONG><a name="[ff]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA::Configuration()
</UL>

<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PORT::Configuration()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init()
</UL>

<P><STRONG><a name="[ca]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PORT::Configuration()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init()
</UL>

<P><STRONG><a name="[e6]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::GetDIS_SPE(float)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Erase_Sector(unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_FLASH_Write_Enable()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_ReadSR()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_ReadID()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LED::Configuration()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Erase_Sector(unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_FLASH_Write_Enable()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_ReadSR()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_ReadID()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init()
</UL>

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NVIC::Configuration()
</UL>

<P><STRONG><a name="[12c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NVIC::Configuration()
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC::Configuration()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init()
</UL>

<P><STRONG><a name="[110]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC::Configuration()
</UL>

<P><STRONG><a name="[8c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[c9]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC::Configuration()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init()
</UL>

<P><STRONG><a name="[8b]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[8e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[ae]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error(unsigned char)
</UL>

<P><STRONG><a name="[ad]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error(unsigned char)
</UL>

<P><STRONG><a name="[3d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dev_sd.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc() &rArr; CmdResp1Error(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>SDIO_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc()
</UL>

<P><STRONG><a name="[b1]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed(unsigned char)
</UL>

<P><STRONG><a name="[b4]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte(unsigned char)
</UL>

<P><STRONG><a name="[b6]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte(unsigned char)
</UL>

<P><STRONG><a name="[b5]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte(unsigned char)
</UL>

<P><STRONG><a name="[b0]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed(unsigned char)
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration()
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, dev_clock.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler &rArr; sys_time()
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock()
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[126]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[124]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[11c]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[11d]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[11e]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[11f]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[120]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[121]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[122]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[123]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[127]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::SetPwm(unsigned short*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[128]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::SetPwm(unsigned short*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[129]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::SetPwm(unsigned short*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[12a]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::SetPwm(unsigned short*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[11b]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USART2_IRQHandler &rArr; _USART::Usart2Call() &rArr; _MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char) &rArr; _PARAMETER::SaveAngularPID() &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart2Call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; _USART::Usart3Call() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart3Call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART6_IRQHandler &rArr; _USART::Usart6Call() &rArr; _US100::disCall() &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart6Call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart6Call()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart3Call()
</UL>

<P><STRONG><a name="[13a]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Configuration()
</UL>

<P><STRONG><a name="[fd]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA::Configuration()
</UL>

<P><STRONG><a name="[8a]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Configuration()
</UL>

<P><STRONG><a name="[134]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart2Call()
</UL>

<P><STRONG><a name="[136]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart6Call()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart3Call()
</UL>

<P><STRONG><a name="[139]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Configuration()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Uart2_Put_Buf(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[8d]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Configuration()
</UL>

<P><STRONG><a name="[133]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_US100::disCall()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart3Call()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart2Call()
</UL>

<P><STRONG><a name="[131]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_US100::SampleTriger(float)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>Loop_check()</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, dev_clock.o(i._Z10Loop_checkv))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time()
</UL>

<P><STRONG><a name="[92]"></a>task_10_ms()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uav_task.o(i._Z10task_10_msv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = task_10_ms() &rArr; _AK8975::DataSample() &rArr; _AK8975::MagCalOffset() &rArr; _PARAMETER::SaveMagOfferset(Vector3&lang;float&rang;) &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::DataUpdate()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::DataSample()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cycle_T(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLoop()
</UL>

<P><STRONG><a name="[98]"></a>task_20_ms()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uav_task.o(i._Z10task_20_msv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = task_20_ms() &rArr; GPS_Call() &rArr; GPS_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_GPGSV_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_Str2num(unsigned char*, unsigned char*) &rArr; NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Call()
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLoop()
</UL>

<P><STRONG><a name="[9a]"></a>task_50_ms()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uav_task.o(i._Z10task_50_msv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task_50_ms() &rArr; _US100::SampleTriger(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_US100::SampleTriger(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLoop()
</UL>

<P><STRONG><a name="[9c]"></a>AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)</STRONG> (Thumb, 8996 bytes, Stack size 3336 bytes, attitudeekf.o(i._Z11AttitudeEKFhhPKhfPKffffffffS2_PfS3_S3_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 3728<LI>Call Chain = AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*) &rArr; mrdivide(float*, const float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fabs(float)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrdivide(float*, const float*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm(const float*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv(const float*, float*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_mrdivide(float*, const float*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)
</UL>

<P><STRONG><a name="[93]"></a>Get_Cycle_T(unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dev_clock.o(i._Z11Get_Cycle_Th))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Cycle_T(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime_us()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_5_ms()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_2_ms()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_10_ms()
</UL>

<P><STRONG><a name="[a4]"></a>GPS_Analysis(nmea_msg*, unsigned char*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dev_gps.o(i._Z12GPS_AnalysisP8nmea_msgPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GPS_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_GPGSV_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_Str2num(unsigned char*, unsigned char*) &rArr; NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPVTG_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPRMC_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGSV_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGSA_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGGA_Analysis(nmea_msg*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Call()
</UL>

<P><STRONG><a name="[aa]"></a>NMEA_Str2num(unsigned char*, unsigned char*)</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, dev_gps.o(i._Z12NMEA_Str2numPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NMEA_Str2num(unsigned char*, unsigned char*) &rArr; NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPVTG_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPRMC_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGSV_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGSA_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGGA_Analysis(nmea_msg*, unsigned char*)
</UL>

<P><STRONG><a name="[ac]"></a>CmdResp1Error(unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dev_sd.o(i._Z13CmdResp1Errorh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc()
</UL>

<P><STRONG><a name="[a3]"></a>GetSysTime_us()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dev_clock.o(i._Z13GetSysTime_usv))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cycle_T(unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us(unsigned)
</UL>

<P><STRONG><a name="[af]"></a>SPI1_SetSpeed(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_spi.o(i._Z13SPI1_SetSpeedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_SetSpeed(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::Init_()
</UL>

<P><STRONG><a name="[b8]"></a>NMEA_Comma_Pos(unsigned char*, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dev_gps.o(i._Z14NMEA_Comma_PosPhh))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPVTG_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPRMC_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGSV_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGSA_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPGGA_Analysis(nmea_msg*, unsigned char*)
</UL>

<P><STRONG><a name="[be]"></a>To_180_degrees(float)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cal_math.o(i._Z14To_180_degreesf))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)
</UL>

<P><STRONG><a name="[84]"></a>SD_ProcessIRQSrc()</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, dev_sd.o(i._Z16SD_ProcessIRQSrcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_ProcessIRQSrc() &rArr; CmdResp1Error(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>GPS_DataCacheCall(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, dev_gps.o(i._Z17GPS_DataCacheCallh))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart3Call()
</UL>

<P><STRONG><a name="[b3]"></a>SPI1_ReadWriteByte(unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dev_spi.o(i._Z18SPI1_ReadWriteByteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Erase_Sector(unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_FLASH_Write_Enable()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_ReadSR()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_ReadID()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init()
</UL>

<P><STRONG><a name="[a6]"></a>NMEA_GPGGA_Analysis(nmea_msg*, unsigned char*)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dev_gps.o(i._Z19NMEA_GPGGA_AnalysisP8nmea_msgPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NMEA_GPGGA_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_Str2num(unsigned char*, unsigned char*) &rArr; NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Comma_Pos(unsigned char*, unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Str2num(unsigned char*, unsigned char*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Analysis(nmea_msg*, unsigned char*)
</UL>

<P><STRONG><a name="[a7]"></a>NMEA_GPGSA_Analysis(nmea_msg*, unsigned char*)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dev_gps.o(i._Z19NMEA_GPGSA_AnalysisP8nmea_msgPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NMEA_GPGSA_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_Str2num(unsigned char*, unsigned char*) &rArr; NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Comma_Pos(unsigned char*, unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Str2num(unsigned char*, unsigned char*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Analysis(nmea_msg*, unsigned char*)
</UL>

<P><STRONG><a name="[a5]"></a>NMEA_GPGSV_Analysis(nmea_msg*, unsigned char*)</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, dev_gps.o(i._Z19NMEA_GPGSV_AnalysisP8nmea_msgPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NMEA_GPGSV_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_Str2num(unsigned char*, unsigned char*) &rArr; NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Comma_Pos(unsigned char*, unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Str2num(unsigned char*, unsigned char*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Analysis(nmea_msg*, unsigned char*)
</UL>

<P><STRONG><a name="[a8]"></a>NMEA_GPRMC_Analysis(nmea_msg*, unsigned char*)</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, dev_gps.o(i._Z19NMEA_GPRMC_AnalysisP8nmea_msgPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NMEA_GPRMC_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_Str2num(unsigned char*, unsigned char*) &rArr; NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Pow(unsigned char, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Comma_Pos(unsigned char*, unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Str2num(unsigned char*, unsigned char*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Analysis(nmea_msg*, unsigned char*)
</UL>

<P><STRONG><a name="[a9]"></a>NMEA_GPVTG_Analysis(nmea_msg*, unsigned char*)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dev_gps.o(i._Z19NMEA_GPVTG_AnalysisP8nmea_msgPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NMEA_GPVTG_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_Str2num(unsigned char*, unsigned char*) &rArr; NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Pow(unsigned char, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Comma_Pos(unsigned char*, unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Str2num(unsigned char*, unsigned char*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Analysis(nmea_msg*, unsigned char*)
</UL>

<P><STRONG><a name="[b9]"></a>SysTick_Configuration()</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, dev_clock.o(i._Z21SysTick_Configurationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SysTick_Configuration() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)</STRONG> (Thumb, 560 bytes, Stack size 240 bytes, imu_ekf.o(i._Z3EKF7Vector3IfES0_S0_Phf))
<BR><BR>[Stack]<UL><LI>Max Depth = 3968<LI>Call Chain = EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float) &rArr; AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*) &rArr; mrdivide(float*, const float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;To_180_degrees(float)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt(float)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::Attitude(float)
</UL>

<P><STRONG><a name="[bd]"></a>invSqrt(float)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cal_math.o(i._Z7invSqrtf))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)
</UL>

<P><STRONG><a name="[160]"></a>radians(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cal_math.o(i._Z7radiansf))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GetGyro2dps()
</UL>

<P><STRONG><a name="[c0]"></a>Delay_ms(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dev_clock.o(i._Z8Delay_msj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay_ms(unsigned) &rArr; Delay_us(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Configuration(unsigned short)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::Configuration()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LED::Configuration()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Configuration()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GyroCalOffset()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::AccCalOffset()
</UL>

<P><STRONG><a name="[c1]"></a>Delay_us(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, dev_clock.o(i._Z8Delay_usj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Delay_us(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime_us()
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms(unsigned)
</UL>

<P><STRONG><a name="[99]"></a>GPS_Call()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dev_gps.o(i._Z8GPS_Callv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GPS_Call() &rArr; GPS_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_GPGSV_Analysis(nmea_msg*, unsigned char*) &rArr; NMEA_Str2num(unsigned char*, unsigned char*) &rArr; NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Analysis(nmea_msg*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_20_ms()
</UL>

<P><STRONG><a name="[ab]"></a>NMEA_Pow(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dev_gps.o(i._Z8NMEA_Powhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMEA_Pow(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPVTG_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_GPRMC_Analysis(nmea_msg*, unsigned char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Str2num(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[c2]"></a>TaskLoop()</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, uav_task.o(i._Z8TaskLoopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056<LI>Call Chain = TaskLoop() &rArr; task_2_ms() &rArr; IMU::Attitude(float) &rArr; EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float) &rArr; AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*) &rArr; mrdivide(float*, const float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_5_ms()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_2_ms()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1_ms()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_50_ms()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_20_ms()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_10_ms()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>sys_time()</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, dev_clock.o(i._Z8sys_timev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sys_time()
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_check()
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c7]"></a>SPI1_Init()</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, dev_spi.o(i._Z9SPI1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI1_Init() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::Init_()
</UL>

<P><STRONG><a name="[14d]"></a>deathzoom(float, float)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, cal_math.o(i._Z9deathzoomff))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
</UL>

<P><STRONG><a name="[c3]"></a>task_1_ms()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uav_task.o(i._Z9task_1_msv))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = task_1_ms() &rArr; _MAVLINK::Data_Exchange() &rArr; _MAVLINK::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float) &rArr; _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Exchange()
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLoop()
</UL>

<P><STRONG><a name="[c4]"></a>task_2_ms()</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, uav_task.o(i._Z9task_2_msv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4048<LI>Call Chain = task_2_ms() &rArr; IMU::Attitude(float) &rArr; EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float) &rArr; AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*) &rArr; mrdivide(float*, const float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::GetDIS_SPE(float)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::Attitude(float)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cycle_T(unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLoop()
</UL>

<P><STRONG><a name="[c5]"></a>task_5_ms()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uav_task.o(i._Z9task_5_msv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = task_5_ms() &rArr; _CONTROL::Angular(float) &rArr; _PID::Err_d(float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angular(float)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::DataMange(float)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cycle_T(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLoop()
</UL>

<P><STRONG><a name="[d4]"></a>_PARAMETER::ReadAnglePID()</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, uav_parameter.o(i._ZN10_PARAMETER12ReadAnglePIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _PARAMETER::ReadAnglePID() &rArr; _FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short) &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Configuration()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[d6]"></a>_PARAMETER::SaveAnglePID()</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, uav_parameter.o(i._ZN10_PARAMETER12SaveAnglePIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _PARAMETER::SaveAnglePID() &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[d8]"></a>_PARAMETER::Configuration()</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, uav_parameter.o(i._ZN10_PARAMETER13ConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _PARAMETER::Configuration() &rArr; _PARAMETER::ReadAngularPID() &rArr; _FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short) &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms(unsigned)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Read_UL_DIS_SPEPID()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Read_MS_DIS_SPEPID()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadMagOfferset()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadGyrOfferset()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAccOfferset()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAngularPID()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAnglePID()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[dc]"></a>_PARAMETER::ReadAngularPID()</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, uav_parameter.o(i._ZN10_PARAMETER14ReadAngularPIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _PARAMETER::ReadAngularPID() &rArr; _FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short) &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Configuration()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[df]"></a>_PARAMETER::SaveAngularPID()</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, uav_parameter.o(i._ZN10_PARAMETER14SaveAngularPIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _PARAMETER::SaveAngularPID() &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[da]"></a>_PARAMETER::ReadAccOfferset()</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, uav_parameter.o(i._ZN10_PARAMETER15ReadAccOffersetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _PARAMETER::ReadAccOfferset() &rArr; _FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short) &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Configuration()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::AccCalOffset()
</UL>

<P><STRONG><a name="[d9]"></a>_PARAMETER::ReadGyrOfferset()</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, uav_parameter.o(i._ZN10_PARAMETER15ReadGyrOffersetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _PARAMETER::ReadGyrOfferset() &rArr; _FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short) &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Configuration()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GyroCalOffset()
</UL>

<P><STRONG><a name="[db]"></a>_PARAMETER::ReadMagOfferset()</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, uav_parameter.o(i._ZN10_PARAMETER15ReadMagOffersetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _PARAMETER::ReadMagOfferset() &rArr; _FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short) &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Configuration()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
</UL>

<P><STRONG><a name="[e0]"></a>_PARAMETER::SaveAccOfferset(Vector3&lang;float&rang;)</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, uav_parameter.o(i._ZN10_PARAMETER15SaveAccOffersetE7Vector3IfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _PARAMETER::SaveAccOfferset(Vector3&lang;float&rang;) &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::AccCalOffset()
</UL>

<P><STRONG><a name="[e1]"></a>_PARAMETER::SaveGyrOfferset(Vector3&lang;float&rang;)</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, uav_parameter.o(i._ZN10_PARAMETER15SaveGyrOffersetE7Vector3IfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _PARAMETER::SaveGyrOfferset(Vector3&lang;float&rang;) &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GyroCalOffset()
</UL>

<P><STRONG><a name="[e2]"></a>_PARAMETER::SaveMagOfferset(Vector3&lang;float&rang;)</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, uav_parameter.o(i._ZN10_PARAMETER15SaveMagOffersetE7Vector3IfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _PARAMETER::SaveMagOfferset(Vector3&lang;float&rang;) &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
</UL>

<P><STRONG><a name="[de]"></a>_PARAMETER::Read_MS_DIS_SPEPID()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, uav_parameter.o(i._ZN10_PARAMETER18Read_MS_DIS_SPEPIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _PARAMETER::Read_MS_DIS_SPEPID() &rArr; _FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short) &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Configuration()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[dd]"></a>_PARAMETER::Read_UL_DIS_SPEPID()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, uav_parameter.o(i._ZN10_PARAMETER18Read_UL_DIS_SPEPIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _PARAMETER::Read_UL_DIS_SPEPID() &rArr; _FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short) &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Configuration()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[e3]"></a>_PARAMETER::Save_MS_DIS_SPEPID()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, uav_parameter.o(i._ZN10_PARAMETER18Save_MS_DIS_SPEPIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _PARAMETER::Save_MS_DIS_SPEPID() &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[e4]"></a>_PARAMETER::Save_UL_DIS_SPEPID()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, uav_parameter.o(i._ZN10_PARAMETER18Save_UL_DIS_SPEPIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _PARAMETER::Save_UL_DIS_SPEPID() &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[e5]"></a>_FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dev_flash.o(i._ZN11_FLASH25Q3214SPI_Flash_ReadEPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short) &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[e7]"></a>_FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, dev_flash.o(i._ZN11_FLASH25Q3215SPI_Flash_WriteEPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Erase_Sector(unsigned)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short)
</UL>

<P><STRONG><a name="[ea]"></a>_FLASH25Q32::SPI_Flash_ReadID()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dev_flash.o(i._ZN11_FLASH25Q3216SPI_Flash_ReadIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _FLASH25Q32::SPI_Flash_ReadID() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::Init_()
</UL>

<P><STRONG><a name="[eb]"></a>_FLASH25Q32::SPI_Flash_ReadSR()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dev_flash.o(i._ZN11_FLASH25Q3216SPI_Flash_ReadSREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Wait_Busy()
</UL>

<P><STRONG><a name="[d5]"></a>_FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dev_flash.o(i._ZN11_FLASH25Q3216SPI_Flash_Read_fEjPft))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _FLASH25Q32::SPI_Flash_Read_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short) &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Read(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Read_UL_DIS_SPEPID()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Read_MS_DIS_SPEPID()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadMagOfferset()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadGyrOfferset()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAccOfferset()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAngularPID()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAnglePID()
</UL>

<P><STRONG><a name="[d7]"></a>_FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dev_flash.o(i._ZN11_FLASH25Q3217SPI_Flash_Write_fEjPft))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Save_UL_DIS_SPEPID()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Save_MS_DIS_SPEPID()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveMagOfferset(Vector3&lang;float&rang;)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveGyrOfferset(Vector3&lang;float&rang;)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveAccOfferset(Vector3&lang;float&rang;)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveAngularPID()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveAnglePID()
</UL>

<P><STRONG><a name="[ec]"></a>_FLASH25Q32::SPI_Flash_Wait_Busy()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dev_flash.o(i._ZN11_FLASH25Q3219SPI_Flash_Wait_BusyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_ReadSR()
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Erase_Sector(unsigned)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[ed]"></a>_FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dev_flash.o(i._ZN11_FLASH25Q3220SPI_Flash_Write_PageEPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_FLASH_Write_Enable()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Wait_Busy()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[ee]"></a>_FLASH25Q32::SPI_FLASH_Write_Enable()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dev_flash.o(i._ZN11_FLASH25Q3222SPI_FLASH_Write_EnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _FLASH25Q32::SPI_FLASH_Write_Enable() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Erase_Sector(unsigned)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[e8]"></a>_FLASH25Q32::SPI_Flash_Erase_Sector(unsigned)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dev_flash.o(i._ZN11_FLASH25Q3222SPI_Flash_Erase_SectorEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _FLASH25Q32::SPI_Flash_Erase_Sector(unsigned) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_FLASH_Write_Enable()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Wait_Busy()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[e9]"></a>_FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dev_flash.o(i._ZN11_FLASH25Q3223SPI_Flash_Write_NoCheckEPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[ef]"></a>_FLASH25Q32::Init_()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dev_flash.o(i._ZN11_FLASH25Q325Init_Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _FLASH25Q32::Init_() &rArr; SPI1_Init() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::SPI_Flash_ReadID()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed(unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[f0]"></a>IMU::Init()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, imu.o(i._ZN3IMU4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IMU::Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::LPF_2nd_Factor_Cal(float, float, Filter::LPF2ndData_t*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::LPF_1st_Factor_Cal(float, float)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::CF_Factor_Cal(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>IMU::Attitude(float)</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, imu.o(i._ZN3IMU8AttitudeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 3992<LI>Call Chain = IMU::Attitude(float) &rArr; EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float) &rArr; AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*) &rArr; mrdivide(float*, const float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::LPF_2nd(Filter::LPF2ndData_t*, Vector3&lang;float&rang;)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::DataSample()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_2_ms()
</UL>

<P><STRONG><a name="[f7]"></a>IMU::IMU()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, imu.o(i._ZN3IMUC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IMU::IMU()
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_imu_cpp_imu
</UL>

<P><STRONG><a name="[191]"></a>IMU::IMU__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, imu.o(i._ZN3IMUC1Ev), UNUSED)

<P><STRONG><a name="[f9]"></a>_RC::Thr()</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, uav_rc.o(i._ZN3_RC3ThrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _RC::Thr() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::DataMange(float)
</UL>

<P><STRONG><a name="[fb]"></a>_RC::Mode()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, uav_rc.o(i._ZN3_RC4ModeEv))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::DataMange(float)
</UL>

<P><STRONG><a name="[fa]"></a>_RC::Deblock(float)</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, uav_rc.o(i._ZN3_RC7DeblockEf))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::DataMange(float)
</UL>

<P><STRONG><a name="[d1]"></a>_RC::DataMange(float)</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, uav_rc.o(i._ZN3_RC9DataMangeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _RC::DataMange(float) &rArr; _RC::Thr() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Deblock(float)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Mode()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Thr()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_5_ms()
</UL>

<P><STRONG><a name="[fc]"></a>_DMA::Configuration()</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, dev_dma.o(i._ZN4_DMA13ConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _DMA::Configuration() &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[102]"></a>_I2C::SingleRead(unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, dev_i2c.o(i._ZN4_I2C10SingleReadEhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _I2C::SingleRead(unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SendByte(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::ReadByte(unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::WaitAck()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Start()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::DataSample()
</UL>

<P><STRONG><a name="[108]"></a>_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, dev_i2c.o(i._ZN4_I2C11SingleWriteEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _I2C::SingleWrite(unsigned char, unsigned char, unsigned char) &rArr; _I2C::WaitAck() &rArr; _I2C::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SendByte(unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::WaitAck()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Start()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::Reset()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::TemperatureSampleTriger()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::PressureSampleTriger()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::SampleTriger()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetSample(unsigned short)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[109]"></a>_I2C::Ack()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dev_i2c.o(i._ZN4_I2C3AckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _I2C::Ack()
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::ReadByte(unsigned char)
</UL>

<P><STRONG><a name="[106]"></a>_I2C::Stop()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dev_i2c.o(i._ZN4_I2C4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _I2C::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::WaitAck()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleRead(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[10a]"></a>_I2C::Delay()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dev_i2c.o(i._ZN4_I2C5DelayEv))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SendByte(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::ReadByte(unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::WaitAck()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Start()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::NoAck()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Stop()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Ack()
</UL>

<P><STRONG><a name="[10b]"></a>_I2C::NoAck()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dev_i2c.o(i._ZN4_I2C5NoAckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::ReadByte(unsigned char)
</UL>

<P><STRONG><a name="[103]"></a>_I2C::Start()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, dev_i2c.o(i._ZN4_I2C5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _I2C::Start()
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleRead(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[105]"></a>_I2C::WaitAck()</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, dev_i2c.o(i._ZN4_I2C7WaitAckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _I2C::WaitAck() &rArr; _I2C::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Delay()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleRead(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[10c]"></a>_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 136 bytes, Stack size 28 bytes, dev_i2c.o(i._ZN4_I2C8MultReadEhhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SendByte(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::ReadByte(unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::WaitAck()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Start()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::ReadProm()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::TemperatureSample()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::PressureSample()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Read()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[107]"></a>_I2C::ReadByte(unsigned char)</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, dev_i2c.o(i._ZN4_I2C8ReadByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::NoAck()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Delay()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Ack()
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleRead(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[104]"></a>_I2C::SendByte(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dev_i2c.o(i._ZN4_I2C8SendByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _I2C::SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleRead(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[10d]"></a>_LED::Configuration()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dev_led.o(i._ZN4_LED13ConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _LED::Configuration() &rArr; Delay_ms(unsigned) &rArr; Delay_us(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms(unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[150]"></a>_PID::Cal()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, uav_pid.o(i._ZN4_PID3CalEv))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angular(float)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
</UL>

<P><STRONG><a name="[14c]"></a>_PID::Init(float, float, float)</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, uav_pid.o(i._ZN4_PID4InitEfff))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::Init()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Init()
</UL>

<P><STRONG><a name="[10e]"></a>_PID::Err_d(float)</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, uav_pid.o(i._ZN4_PID5Err_dEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _PID::Err_d(float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angular(float)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
</UL>

<P><STRONG><a name="[16e]"></a>_PID::Err_i(float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uav_pid.o(i._ZN4_PID5Err_iEf))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
</UL>

<P><STRONG><a name="[14e]"></a>_PID::GetErr(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uav_pid.o(i._ZN4_PID6GetErrEf))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::DISControl(float)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angular(float)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
</UL>

<P><STRONG><a name="[14f]"></a>_PID::disErr_i(float, float)</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, uav_pid.o(i._ZN4_PID8disErr_iEff))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angular(float)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angle(float)
</UL>

<P><STRONG><a name="[10f]"></a>_RCC::Configuration()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, dev_rcc.o(i._ZN4_RCC13ConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RCC::Configuration()
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[111]"></a>_UAV::Init()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, uav_init.o(i._ZN4_UAV4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _UAV::Init() &rArr; _MPU6050::Configuration(unsigned short) &rArr; _MPU6050::SetDLPF(unsigned char) &rArr; _MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::Init()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Configuration(unsigned short)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::Configuration()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Configuration()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PORT::Configuration()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NVIC::Configuration()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoInit()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC::Configuration()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LED::Configuration()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA::Configuration()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::Init_()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Configuration()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms(unsigned)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, dev_moto.o(i._ZN5_MOTO12MotoBaseInitEP11TIM_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char) &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoInit()
</UL>

<P><STRONG><a name="[12b]"></a>_MOTO::SetPwm(unsigned short*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dev_moto.o(i._ZN5_MOTO6SetPwmEPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _MOTO::SetPwm(unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::DecompositionOutput()
</UL>

<P><STRONG><a name="[117]"></a>_MOTO::MotoInit()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dev_moto.o(i._ZN5_MOTO8MotoInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _MOTO::MotoInit() &rArr; _MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char) &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::MotoBaseInit(TIM_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[114]"></a>_NVIC::Configuration()</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, dev_nvic.o(i._ZN5_NVIC13ConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _NVIC::Configuration() &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[112]"></a>_PORT::Configuration()</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, dev_port.o(i._ZN5_PORT13ConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _PORT::Configuration() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[f3]"></a>Filter::CF_Factor_Cal(float, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uav_filter.o(i._ZN6Filter13CF_Factor_CalEff))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::Init()
</UL>

<P><STRONG><a name="[14a]"></a>Filter::Moving_Average(float, float*, unsigned short, unsigned short*, float*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, uav_filter.o(i._ZN6Filter14Moving_AverageEfPftPtS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Filter::Moving_Average(float, float*, unsigned short, unsigned short*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::BaroAltCalculate()
</UL>

<P><STRONG><a name="[f2]"></a>Filter::LPF_1st_Factor_Cal(float, float)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uav_filter.o(i._ZN6Filter18LPF_1st_Factor_CalEff))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::Init()
</UL>

<P><STRONG><a name="[f1]"></a>Filter::LPF_2nd_Factor_Cal(float, float, Filter::LPF2ndData_t*)</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, uav_filter.o(i._ZN6Filter18LPF_2nd_Factor_CalEffPNS_12LPF2ndData_tE))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::Init()
</UL>

<P><STRONG><a name="[f5]"></a>Filter::LPF_2nd(Filter::LPF2ndData_t*, Vector3&lang;float&rang;)</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, uav_filter.o(i._ZN6Filter7LPF_2ndEPNS_12LPF2ndData_tE7Vector3IfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Filter::LPF_2nd(Filter::LPF2ndData_t*, Vector3&lang;float&rang;) &rArr; Vector3&lang;float&rang;::operator *(float) const
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::Attitude(float)
</UL>

<P><STRONG><a name="[83]"></a>_DEBUS::RemotCall()</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, dev_debus.o(i._ZN6_DEBUS9RemotCallEv))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>_US100::SampleTriger(float)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, dev_us100.o(i._ZN6_US10012SampleTrigerEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _US100::SampleTriger(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_50_ms()
</UL>

<P><STRONG><a name="[132]"></a>_US100::disCall()</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dev_us100.o(i._ZN6_US1007disCallEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _US100::disCall() &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart6Call()
</UL>

<P><STRONG><a name="[87]"></a>_USART::Usart2Call()</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, dev_usart.o(i._ZN6_USART10Usart2CallEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _USART::Usart2Call() &rArr; _MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char) &rArr; _PARAMETER::SaveAngularPID() &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>_USART::Usart3Call()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dev_usart.o(i._ZN6_USART10Usart3CallEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _USART::Usart3Call() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DataCacheCall(unsigned char)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>_USART::Usart6Call()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dev_usart.o(i._ZN6_USART10Usart6CallEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _USART::Usart6Call() &rArr; _US100::disCall() &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_US100::disCall()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>_USART::Configuration()</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, dev_usart.o(i._ZN6_USART13ConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _USART::Configuration() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[13b]"></a>_USART::Uart2_Put_Buf(unsigned char*, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dev_usart.o(i._ZN6_USART13Uart2_Put_BufEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Data(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[95]"></a>_AK8975::DataSample()</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, dev_ak8975.o(i._ZN7_AK897510DataSampleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _AK8975::DataSample() &rArr; _AK8975::MagCalOffset() &rArr; _PARAMETER::SaveMagOfferset(Vector3&lang;float&rang;) &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::SampleTriger()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleRead(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_10_ms()
</UL>

<P><STRONG><a name="[13c]"></a>_AK8975::MagCalOffset()</STRONG> (Thumb, 620 bytes, Stack size 56 bytes, dev_ak8975.o(i._ZN7_AK897512MagCalOffsetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _AK8975::MagCalOffset() &rArr; _PARAMETER::SaveMagOfferset(Vector3&lang;float&rang;) &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveMagOfferset(Vector3&lang;float&rang;)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadMagOfferset()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::DataSample()
</UL>

<P><STRONG><a name="[13d]"></a>_AK8975::SampleTriger()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dev_ak8975.o(i._ZN7_AK897512SampleTrigerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _AK8975::SampleTriger() &rArr; _I2C::SingleWrite(unsigned char, unsigned char, unsigned char) &rArr; _I2C::WaitAck() &rArr; _I2C::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::DataSample()
</UL>

<P><STRONG><a name="[94]"></a>_MS5611::DataUpdate()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dev_ms5611.o(i._ZN7_MS561110DataUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _MS5611::DataUpdate() &rArr; _MS5611::BaroAltCalculate() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::TemperatureSampleTriger()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::PressureSampleTriger()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::TemperatureSample()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::BaroAltCalculate()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::PressureSample()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_10_ms()
</UL>

<P><STRONG><a name="[119]"></a>_MS5611::Configuration()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dev_ms5611.o(i._ZN7_MS561113ConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _MS5611::Configuration() &rArr; _MS5611::ReadProm() &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms(unsigned)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::ReadProm()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::Reset()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::TemperatureSampleTriger()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[143]"></a>_MS5611::PressureSample()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_ms5611.o(i._ZN7_MS561114PressureSampleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _MS5611::PressureSample() &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::DataUpdate()
</UL>

<P><STRONG><a name="[145]"></a>_MS5611::BaroAltCalculate()</STRONG> (Thumb, 752 bytes, Stack size 104 bytes, dev_ms5611.o(i._ZN7_MS561116BaroAltCalculateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _MS5611::BaroAltCalculate() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::Moving_Average(float, float*, unsigned short, unsigned short*, float*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::DataUpdate()
</UL>

<P><STRONG><a name="[146]"></a>_MS5611::TemperatureSample()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_ms5611.o(i._ZN7_MS561117TemperatureSampleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _MS5611::TemperatureSample() &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::DataUpdate()
</UL>

<P><STRONG><a name="[147]"></a>_MS5611::PressureSampleTriger()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dev_ms5611.o(i._ZN7_MS561120PressureSampleTrigerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _MS5611::PressureSampleTriger() &rArr; _I2C::SingleWrite(unsigned char, unsigned char, unsigned char) &rArr; _I2C::WaitAck() &rArr; _I2C::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::DataUpdate()
</UL>

<P><STRONG><a name="[144]"></a>_MS5611::TemperatureSampleTriger()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dev_ms5611.o(i._ZN7_MS561123TemperatureSampleTrigerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _MS5611::TemperatureSampleTriger() &rArr; _I2C::SingleWrite(unsigned char, unsigned char, unsigned char) &rArr; _I2C::WaitAck() &rArr; _I2C::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::Configuration()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::DataUpdate()
</UL>

<P><STRONG><a name="[148]"></a>_MS5611::Reset()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dev_ms5611.o(i._ZN7_MS56115ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _MS5611::Reset() &rArr; _I2C::SingleWrite(unsigned char, unsigned char, unsigned char) &rArr; _I2C::WaitAck() &rArr; _I2C::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::Configuration()
</UL>

<P><STRONG><a name="[149]"></a>_MS5611::ReadProm()</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dev_ms5611.o(i._ZN7_MS56118ReadPromEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _MS5611::ReadProm() &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MS5611::Configuration()
</UL>

<P><STRONG><a name="[14b]"></a>_CONTROL::DecompositionOutput()</STRONG> (Thumb, 764 bytes, Stack size 48 bytes, uav_control.o(i._ZN8_CONTROL19DecompositionOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _CONTROL::DecompositionOutput() &rArr; _MOTO::SetPwm(unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MOTO::SetPwm(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::Angular(float)
</UL>

<P><STRONG><a name="[115]"></a>_CONTROL::Init()</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, uav_control.o(i._ZN8_CONTROL4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _CONTROL::Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Init(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[96]"></a>_CONTROL::Angle(float)</STRONG> (Thumb, 1514 bytes, Stack size 64 bytes, uav_control.o(i._ZN8_CONTROL5AngleEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _CONTROL::Angle(float) &rArr; _PID::Err_d(float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::disErr_i(float, float)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::GetErr(float)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Err_d(float)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Cal()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deathzoom(float, float)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;To_180_degrees(float)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_10_ms()
</UL>

<P><STRONG><a name="[d2]"></a>_CONTROL::Angular(float)</STRONG> (Thumb, 2172 bytes, Stack size 120 bytes, uav_control.o(i._ZN8_CONTROL7AngularEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _CONTROL::Angular(float) &rArr; _PID::Err_d(float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::disErr_i(float, float)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::GetErr(float)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Err_d(float)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Cal()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CONTROL::DecompositionOutput()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_5_ms()
</UL>

<P><STRONG><a name="[151]"></a>_MAVLINK::Send_Check(unsigned char, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dev_mavlink.o(i._ZN8_MAVLINK10Send_CheckEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _MAVLINK::Send_Check(unsigned char, unsigned char) &rArr; _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[153]"></a>_MAVLINK::Send_Power(unsigned short, unsigned short)</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, dev_mavlink.o(i._ZN8_MAVLINK10Send_PowerEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _MAVLINK::Send_Power(unsigned short, unsigned short) &rArr; _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Exchange()
</UL>

<P><STRONG><a name="[154]"></a>_MAVLINK::Send_RCData(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, dev_mavlink.o(i._ZN8_MAVLINK11Send_RCDataEtttttttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _MAVLINK::Send_RCData(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Exchange()
</UL>

<P><STRONG><a name="[155]"></a>_MAVLINK::Send_Senser(short, short, short, short, short, short, short, short, short)</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, dev_mavlink.o(i._ZN8_MAVLINK11Send_SenserEsssssssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _MAVLINK::Send_Senser(short, short, short, short, short, short, short, short, short) &rArr; _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Exchange()
</UL>

<P><STRONG><a name="[156]"></a>_MAVLINK::Send_Status(float, float, float, int, unsigned char, unsigned char)</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, dev_mavlink.o(i._ZN8_MAVLINK11Send_StatusEfffihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _MAVLINK::Send_Status(float, float, float, int, unsigned char, unsigned char) &rArr; _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Exchange()
</UL>

<P><STRONG><a name="[157]"></a>_MAVLINK::Send_Senser2(int, unsigned short)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, dev_mavlink.o(i._ZN8_MAVLINK12Send_Senser2Eit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _MAVLINK::Send_Senser2(int, unsigned short) &rArr; _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Exchange()
</UL>

<P><STRONG><a name="[158]"></a>_MAVLINK::Send_Version(unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, dev_mavlink.o(i._ZN8_MAVLINK12Send_VersionEhtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _MAVLINK::Send_Version(unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Exchange()
</UL>

<P><STRONG><a name="[cd]"></a>_MAVLINK::Data_Exchange()</STRONG> (Thumb, 1168 bytes, Stack size 40 bytes, dev_mavlink.o(i._ZN8_MAVLINK13Data_ExchangeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _MAVLINK::Data_Exchange() &rArr; _MAVLINK::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float) &rArr; _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Version(unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Senser2(int, unsigned short)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Status(float, float, float, int, unsigned char, unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Senser(short, short, short, short, short, short, short, short, short)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_RCData(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Power(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1_ms()
</UL>

<P><STRONG><a name="[135]"></a>_MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char)</STRONG> (Thumb, 1330 bytes, Stack size 24 bytes, dev_mavlink.o(i._ZN8_MAVLINK16Data_Receive_AnlEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _MAVLINK::Data_Receive_Anl(unsigned char*, unsigned char) &rArr; _PARAMETER::SaveAngularPID() &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms(unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Save_UL_DIS_SPEPID()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Save_MS_DIS_SPEPID()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Read_UL_DIS_SPEPID()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Read_MS_DIS_SPEPID()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveAngularPID()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAngularPID()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveAnglePID()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAnglePID()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Check(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Usart2Call()
</UL>

<P><STRONG><a name="[159]"></a>_MAVLINK::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 606 bytes, Stack size 64 bytes, dev_mavlink.o(i._ZN8_MAVLINK8Send_PIDEhfffffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _MAVLINK::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float) &rArr; _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Data_Exchange()
</UL>

<P><STRONG><a name="[152]"></a>_MAVLINK::Send_Data(unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_mavlink.o(i._ZN8_MAVLINK9Send_DataEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _MAVLINK::Send_Data(unsigned char*, unsigned char) &rArr; _USART::Uart2_Put_Buf(unsigned char*, unsigned char) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART::Uart2_Put_Buf(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Version(unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Senser2(int, unsigned short)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Status(float, float, float, int, unsigned char, unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Senser(short, short, short, short, short, short, short, short, short)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_RCData(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Power(unsigned short, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAVLINK::Send_Check(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f4]"></a>_MPU6050::DataSample()</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, dev_mup6050.o(i._ZN8_MPU605010DataSampleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _MPU6050::DataSample() &rArr; _MPU6050::GyroCalOffset() &rArr; _PARAMETER::SaveGyrOfferset(Vector3&lang;float&rang;) &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;short&rang;::Vector3()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Read()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GyroAutoOffset(unsigned char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GyroCalOffset()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::AccCalOffset()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GetGyro2dps()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::Attitude(float)
</UL>

<P><STRONG><a name="[15f]"></a>_MPU6050::GetGyro2dps()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dev_mup6050.o(i._ZN8_MPU605011GetGyro2dpsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _MPU6050::GetGyro2dps()
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radians(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::DataSample()
</UL>

<P><STRONG><a name="[161]"></a>_MPU6050::I2CwriteBit(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dev_mup6050.o(i._ZN8_MPU605011I2CwriteBitEhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _MPU6050::I2CwriteBit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetSleep(unsigned char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetI2CMasterMode(unsigned char)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetI2CBypass(unsigned char)
</UL>

<P><STRONG><a name="[15d]"></a>_MPU6050::AccCalOffset()</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, dev_mup6050.o(i._ZN8_MPU605012AccCalOffsetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _MPU6050::AccCalOffset() &rArr; _PARAMETER::SaveAccOfferset(Vector3&lang;float&rang;) &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms(unsigned)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveAccOfferset(Vector3&lang;float&rang;)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAccOfferset()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::DataSample()
</UL>

<P><STRONG><a name="[163]"></a>_MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, dev_mup6050.o(i._ZN8_MPU605012I2CwriteBitsEhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetDLPF(unsigned char)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetFullScaleAccelRange(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetFullScaleGyroRange(unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetClockSource(unsigned char)
</UL>

<P><STRONG><a name="[164]"></a>_MPU6050::SetI2CBypass(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_mup6050.o(i._ZN8_MPU605012SetI2CBypassEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _MPU6050::SetI2CBypass(unsigned char) &rArr; _MPU6050::I2CwriteBit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Configuration(unsigned short)
</UL>

<P><STRONG><a name="[118]"></a>_MPU6050::Configuration(unsigned short)</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, dev_mup6050.o(i._ZN8_MPU605013ConfigurationEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _MPU6050::Configuration(unsigned short) &rArr; _MPU6050::SetDLPF(unsigned char) &rArr; _MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms(unsigned)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetSample(unsigned short)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetSleep(unsigned char)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetDLPF(unsigned char)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetFullScaleAccelRange(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetFullScaleGyroRange(unsigned char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetI2CMasterMode(unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetClockSource(unsigned char)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::SetI2CBypass(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[15c]"></a>_MPU6050::GyroCalOffset()</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, dev_mup6050.o(i._ZN8_MPU605013GyroCalOffsetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _MPU6050::GyroCalOffset() &rArr; _PARAMETER::SaveGyrOfferset(Vector3&lang;float&rang;) &rArr; _FLASH25Q32::SPI_Flash_Write_f(unsigned, float*, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_NoCheck(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Write_Page(unsigned char*, unsigned, unsigned short) &rArr; _FLASH25Q32::SPI_Flash_Wait_Busy() &rArr; _FLASH25Q32::SPI_Flash_ReadSR() &rArr; SPI1_ReadWriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms(unsigned)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveGyrOfferset(Vector3&lang;float&rang;)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadGyrOfferset()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::DataSample()
</UL>

<P><STRONG><a name="[15e]"></a>_MPU6050::GyroAutoOffset(unsigned char)</STRONG> (Thumb, 588 bytes, Stack size 0 bytes, dev_mup6050.o(i._ZN8_MPU605014GyroAutoOffsetEh))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::DataSample()
</UL>

<P><STRONG><a name="[166]"></a>_MPU6050::SetClockSource(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, dev_mup6050.o(i._ZN8_MPU605014SetClockSourceEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _MPU6050::SetClockSource(unsigned char) &rArr; _MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Configuration(unsigned short)
</UL>

<P><STRONG><a name="[16b]"></a>_MPU6050::SetI2CMasterMode(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_mup6050.o(i._ZN8_MPU605016SetI2CMasterModeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _MPU6050::SetI2CMasterMode(unsigned char) &rArr; _MPU6050::I2CwriteBit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Configuration(unsigned short)
</UL>

<P><STRONG><a name="[168]"></a>_MPU6050::SetFullScaleGyroRange(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dev_mup6050.o(i._ZN8_MPU605021SetFullScaleGyroRangeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _MPU6050::SetFullScaleGyroRange(unsigned char) &rArr; _MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Configuration(unsigned short)
</UL>

<P><STRONG><a name="[169]"></a>_MPU6050::SetFullScaleAccelRange(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dev_mup6050.o(i._ZN8_MPU605022SetFullScaleAccelRangeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _MPU6050::SetFullScaleAccelRange(unsigned char) &rArr; _MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Configuration(unsigned short)
</UL>

<P><STRONG><a name="[15b]"></a>_MPU6050::Read()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dev_mup6050.o(i._ZN8_MPU60504ReadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _MPU6050::Read() &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::DataSample()
</UL>

<P><STRONG><a name="[16a]"></a>_MPU6050::SetDLPF(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, dev_mup6050.o(i._ZN8_MPU60507SetDLPFEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _MPU6050::SetDLPF(unsigned char) &rArr; _MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Configuration(unsigned short)
</UL>

<P><STRONG><a name="[165]"></a>_MPU6050::SetSleep(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_mup6050.o(i._ZN8_MPU60508SetSleepEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _MPU6050::SetSleep(unsigned char) &rArr; _MPU6050::I2CwriteBit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; _I2C::MultRead(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; _I2C::ReadByte(unsigned char) &rArr; _I2C::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::I2CwriteBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Configuration(unsigned short)
</UL>

<P><STRONG><a name="[167]"></a>_MPU6050::SetSample(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dev_mup6050.o(i._ZN8_MPU60509SetSampleEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _MPU6050::SetSample(unsigned short) &rArr; _I2C::SingleWrite(unsigned char, unsigned char, unsigned char) &rArr; _I2C::WaitAck() &rArr; _I2C::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C::SingleWrite(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::Configuration(unsigned short)
</UL>

<P><STRONG><a name="[16d]"></a>_MPU6050::_MPU6050()</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, dev_mup6050.o(i._ZN8_MPU6050C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _MPU6050::_MPU6050()
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;short&rang;::Vector3()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_dev_mup6050_cpp_Mpu6050
</UL>

<P><STRONG><a name="[192]"></a>_MPU6050::_MPU6050__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dev_mup6050.o(i._ZN8_MPU6050C1Ev), UNUSED)

<P><STRONG><a name="[97]"></a>_ATTITUDE::DISControl(float)</STRONG> (Thumb, 526 bytes, Stack size 72 bytes, uav_attitude.o(i._ZN9_ATTITUDE10DISControlEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _ATTITUDE::DISControl(float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Err_i(float)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::GetErr(float)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Cal()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_10_ms()
</UL>

<P><STRONG><a name="[cf]"></a>_ATTITUDE::GetDIS_SPE(float)</STRONG> (Thumb, 1204 bytes, Stack size 80 bytes, uav_attitude.o(i._ZN9_ATTITUDE10GetDIS_SPEEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _ATTITUDE::GetDIS_SPE(float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_2_ms()
</UL>

<P><STRONG><a name="[d3]"></a>_ATTITUDE::SPEControl(float)</STRONG> (Thumb, 858 bytes, Stack size 72 bytes, uav_attitude.o(i._ZN9_ATTITUDE10SPEControlEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _ATTITUDE::SPEControl(float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::disErr_i(float, float)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::GetErr(float)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Cal()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_5_ms()
</UL>

<P><STRONG><a name="[116]"></a>_ATTITUDE::Init()</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, uav_attitude.o(i._ZN9_ATTITUDE4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ATTITUDE::Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID::Init(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
</UL>

<P><STRONG><a name="[91]"></a>std::fabs(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, attitudeekf.o(i._ZSt4fabsf))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrdivide(float*, const float*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm(const float*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv(const float*, float*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_mrdivide(float*, const float*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[a1]"></a>std::atan2(float, float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, imu_gradient.o(i._ZSt5atan2ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::atan2(float, float) &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[171]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[193]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d0]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FLASH25Q32::Init_()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_2_ms()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Save_UL_DIS_SPEPID()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Save_MS_DIS_SPEPID()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Read_UL_DIS_SPEPID()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::Read_MS_DIS_SPEPID()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveMagOfferset(Vector3&lang;float&rang;)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveGyrOfferset(Vector3&lang;float&rang;)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveAccOfferset(Vector3&lang;float&rang;)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadMagOfferset()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadGyrOfferset()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAccOfferset()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveAngularPID()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAngularPID()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::SaveAnglePID()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PARAMETER::ReadAnglePID()
</UL>

<P><STRONG><a name="[194]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[195]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[174]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[13f]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GyroCalOffset()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::AccCalOffset()
</UL>

<P><STRONG><a name="[a2]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[170]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
</UL>

<P><STRONG><a name="[16f]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ATTITUDE::SPEControl(float)
</UL>

<P><STRONG><a name="[bf]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm(const float*)
</UL>

<P><STRONG><a name="[176]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[179]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[178]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[175]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[196]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[197]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[198]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[177]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[61]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dev_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[5e]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uav_task.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056<LI>Call Chain = main &rArr; TaskLoop() &rArr; task_2_ms() &rArr; IMU::Attitude(float) &rArr; EKF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned char*, float) &rArr; AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*) &rArr; mrdivide(float*, const float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UAV::Init()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::Init()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLoop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[173]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[13e]"></a>Vector3&lang;float&rang;::Vector3(float, float, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, imu_dcm.o(t._ZN7Vector3IfEC1Efff))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
</UL>

<P><STRONG><a name="[199]"></a>Vector3&lang;float&rang;::Vector3__sub_object(float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, imu_dcm.o(t._ZN7Vector3IfEC1Efff), UNUSED)

<P><STRONG><a name="[f8]"></a>Vector3&lang;float&rang;::Vector3()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, imu.o(t._ZN7Vector3IfEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_uav_attitude_cpp_Attitude
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::IMU()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_dev_ak8975_cpp_Ak8975
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::_MPU6050()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GyroCalOffset()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::AccCalOffset()
</UL>

<P><STRONG><a name="[19a]"></a>Vector3&lang;float&rang;::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, imu.o(t._ZN7Vector3IfEC1Ev), UNUSED)

<P><STRONG><a name="[142]"></a>Vector3&lang;float&rang;::operator ()(float, float, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dev_ak8975.o(t._ZN7Vector3IfEclEfff))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GyroCalOffset()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::AccCalOffset()
</UL>

<P><STRONG><a name="[16c]"></a>Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cal_vector3.o(t._ZN7Vector3IfEpLERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GyroCalOffset()
</UL>

<P><STRONG><a name="[15a]"></a>Vector3&lang;short&rang;::Vector3()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uav_filter.o(t._ZN7Vector3IsEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::DataSample()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::_MPU6050()
</UL>

<P><STRONG><a name="[19b]"></a>Vector3&lang;short&rang;::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uav_filter.o(t._ZN7Vector3IsEC1Ev), UNUSED)

<P><STRONG><a name="[162]"></a>Vector3&lang;float&rang;::operator /(float) const</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, cal_vector3.o(t._ZNK7Vector3IfEdvEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Vector3&lang;float&rang;::operator /(float) const
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::GyroCalOffset()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::AccCalOffset()
</UL>

<P><STRONG><a name="[130]"></a>Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cal_vector3.o(t._ZNK7Vector3IfEmiERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::LPF_2nd(Filter::LPF2ndData_t*, Vector3&lang;float&rang;)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::DataSample()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::DataSample()
</UL>

<P><STRONG><a name="[f6]"></a>Vector3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cal_vector3.o(t._ZNK7Vector3IfEmlERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::Attitude(float)
</UL>

<P><STRONG><a name="[12e]"></a>Vector3&lang;float&rang;::operator *(float) const</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, cal_vector3.o(t._ZNK7Vector3IfEmlEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector3&lang;float&rang;::operator *(float) const
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::LPF_2nd(Filter::LPF2ndData_t*, Vector3&lang;float&rang;)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::DataSample()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
</UL>

<P><STRONG><a name="[12f]"></a>Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cal_vector3.o(t._ZNK7Vector3IfEplERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::LPF_2nd(Filter::LPF2ndData_t*, Vector3&lang;float&rang;)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::DataSample()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AK8975::MagCalOffset()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[62]"></a>__sti___12_uav_task_cpp_UAV</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uav_task.o(i.__sti___12_uav_task_cpp_UAV))
<BR>[Address Reference Count : 1]<UL><LI> uav_task.o(.init_array)
</UL>
<P><STRONG><a name="[63]"></a>__sti___14_uav_filter_cpp_filter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uav_filter.o(i.__sti___14_uav_filter_cpp_filter))
<BR>[Address Reference Count : 1]<UL><LI> uav_filter.o(.init_array)
</UL>
<P><STRONG><a name="[64]"></a>__sti___7_imu_cpp_imu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, imu.o(i.__sti___7_imu_cpp_imu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___7_imu_cpp_imu &rArr; IMU::IMU()
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::IMU()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.init_array)
</UL>
<P><STRONG><a name="[8f]"></a>b_mrdivide(float*, const float*)</STRONG> (Thumb, 866 bytes, Stack size 208 bytes, attitudeekf.o(i._Z10b_mrdividePfPKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = b_mrdivide(float*, const float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fabs(float)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[9d]"></a>inv(const float*, float*)</STRONG> (Thumb, 806 bytes, Stack size 88 bytes, attitudeekf.o(i._Z3invPKfPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inv(const float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fabs(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[a0]"></a>norm(const float*)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, attitudeekf.o(i._Z4normPKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = norm(const float*) &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fabs(float)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[9f]"></a>mrdivide(float*, const float*)</STRONG> (Thumb, 870 bytes, Stack size 392 bytes, attitudeekf.o(i._Z8mrdividePfPKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mrdivide(float*, const float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fabs(float)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeEKF(unsigned char, unsigned char, const unsigned char*, float, const float*, float, float, float, float, float, float, float, const float*, float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[65]"></a>__sti___16_uav_attitude_cpp_Attitude</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uav_attitude.o(i.__sti___16_uav_attitude_cpp_Attitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___16_uav_attitude_cpp_Attitude
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uav_attitude.o(.init_array)
</UL>
<P><STRONG><a name="[66]"></a>__sti___14_dev_ak8975_cpp_Ak8975</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dev_ak8975.o(i.__sti___14_dev_ak8975_cpp_Ak8975))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___14_dev_ak8975_cpp_Ak8975
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ak8975.o(.init_array)
</UL>
<P><STRONG><a name="[67]"></a>__sti___14_dev_ms5611_cpp_Ms5611</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dev_ms5611.o(i.__sti___14_dev_ms5611_cpp_Ms5611))
<BR>[Address Reference Count : 1]<UL><LI> dev_ms5611.o(.init_array)
</UL>
<P><STRONG><a name="[68]"></a>__sti___15_dev_mup6050_cpp_Mpu6050</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dev_mup6050.o(i.__sti___15_dev_mup6050_cpp_Mpu6050))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___15_dev_mup6050_cpp_Mpu6050 &rArr; _MPU6050::_MPU6050()
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MPU6050::_MPU6050()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_mup6050.o(.init_array)
</UL>
<P><STRONG><a name="[86]"></a>SetSysClock()</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i._Z11SetSysClockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[17a]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[172]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[17c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
